process.title = 'decentraland-node';
const path = require('path');

var decentraland = require('../');

var options = decentraland.config({
  config: true,
  arg: true,
  env: true,
  logLevel: 'debug',
  logFile: true,
  db: 'leveldb',
  indexTX: true,
  listen: true,
});

options.bootstrapNetwork = true;
options.useWorkers = true;

Object.assign(options, {
  fast: true,
  network: "testnet",
  httpport: 8301,
  prefix: "./data",
  apikey: process.env.RPC_API_KEY,
  contentPort: 9301,
  port: 2301
})

decentraland.set(options);

var node = new decentraland.fullnode(options);

node.on('error', function(err) {
  console.log(err)
});

process.on('uncaughtException', function(err) {
  node.logger.debug(err.stack);
  node.logger.error(err);
  // process.exit(1);
});

const startMiner = () => {
  if (options.startMiner) {
    node.logger.info('Starting miner ...');
    node.miner.start();
  }
};

node.open().then(function() {
  node.pool.connect();
  node.startSync();
  setTimeout(startMiner, 1000);
});

const express = require('express');
const cors = require('cors');
const app = express();

const KEY = process.env.KEY || 'secret';
app.set('port', (options.contentPort || 9301));

app.use(cors());
app.use('/tile/0.0.lnd', express.static(path.join(__dirname, '../data/genesis.tld')));
app.use('/tile', express.static(node.chain.content._dirPath()));

app.listen(app.get('port'), function() {
  node.logger.info('Content server listening on port', app.get('port'));
});
